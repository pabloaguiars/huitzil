/* Generated By:JavaCC: Do not edit this line. LexicalConstants.java */
//package for all files in the lexical/ directory
package lexical;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LexicalConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int t_if = 5;
  /** RegularExpression Id. */
  int t_elif = 6;
  /** RegularExpression Id. */
  int t_unless = 7;
  /** RegularExpression Id. */
  int t_parenthesis_open = 8;
  /** RegularExpression Id. */
  int t_parenthesis_close = 9;
  /** RegularExpression Id. */
  int t_colons = 10;
  /** RegularExpression Id. */
  int t_else = 11;
  /** RegularExpression Id. */
  int t_true = 12;
  /** RegularExpression Id. */
  int t_false = 13;
  /** RegularExpression Id. */
  int t_assignment = 14;
  /** RegularExpression Id. */
  int t_equal = 15;
  /** RegularExpression Id. */
  int t_equal_exactly = 16;
  /** RegularExpression Id. */
  int t_less_than = 17;
  /** RegularExpression Id. */
  int t_less_equal = 18;
  /** RegularExpression Id. */
  int t_greater_than = 19;
  /** RegularExpression Id. */
  int t_greater_equal = 20;
  /** RegularExpression Id. */
  int t_not_equal = 21;
  /** RegularExpression Id. */
  int t_not_equal_exactly = 22;
  /** RegularExpression Id. */
  int t_and_logic = 23;
  /** RegularExpression Id. */
  int t_or_logic = 24;
  /** RegularExpression Id. */
  int t_not_logic = 25;
  /** RegularExpression Id. */
  int t_switch = 26;
  /** RegularExpression Id. */
  int t_case = 27;
  /** RegularExpression Id. */
  int t_default = 28;
  /** RegularExpression Id. */
  int t_break = 29;
  /** RegularExpression Id. */
  int t_next = 30;
  /** RegularExpression Id. */
  int t_not_yet = 31;
  /** RegularExpression Id. */
  int t_again = 32;
  /** RegularExpression Id. */
  int t_for = 33;
  /** RegularExpression Id. */
  int t_while = 34;
  /** RegularExpression Id. */
  int t_until = 35;
  /** RegularExpression Id. */
  int t_iterator = 36;
  /** RegularExpression Id. */
  int t_foreach = 37;
  /** RegularExpression Id. */
  int t_do = 38;
  /** RegularExpression Id. */
  int t_range = 39;
  /** RegularExpression Id. */
  int t_comma = 40;
  /** RegularExpression Id. */
  int t_output = 41;
  /** RegularExpression Id. */
  int t_text = 42;
  /** RegularExpression Id. */
  int t_input = 43;
  /** RegularExpression Id. */
  int t_plus = 44;
  /** RegularExpression Id. */
  int t_minus = 45;
  /** RegularExpression Id. */
  int t_division = 46;
  /** RegularExpression Id. */
  int t_division_floor = 47;
  /** RegularExpression Id. */
  int t_multiplication = 48;
  /** RegularExpression Id. */
  int t_pow = 49;
  /** RegularExpression Id. */
  int t_module = 50;
  /** RegularExpression Id. */
  int t_plus_assignment = 51;
  /** RegularExpression Id. */
  int t_minus_assignment = 52;
  /** RegularExpression Id. */
  int t_multiplication_assignment = 53;
  /** RegularExpression Id. */
  int t_division_assignment = 54;
  /** RegularExpression Id. */
  int t_division_floor_assignment = 55;
  /** RegularExpression Id. */
  int t_pow_assignment = 56;
  /** RegularExpression Id. */
  int t_module_assignment = 57;
  /** RegularExpression Id. */
  int t_and_binary = 58;
  /** RegularExpression Id. */
  int t_or_binary = 59;
  /** RegularExpression Id. */
  int t_xor_binary = 60;
  /** RegularExpression Id. */
  int t_complement_binary = 61;
  /** RegularExpression Id. */
  int t_left_shift_binary = 62;
  /** RegularExpression Id. */
  int t_right_shift_binary = 63;
  /** RegularExpression Id. */
  int t_and_binary_assignment = 64;
  /** RegularExpression Id. */
  int t_or_binary_assignment = 65;
  /** RegularExpression Id. */
  int t_xor_binary_assignment = 66;
  /** RegularExpression Id. */
  int t_complement_binary_assignment = 67;
  /** RegularExpression Id. */
  int t_left_shift_binary_assignment = 68;
  /** RegularExpression Id. */
  int t_right_shift_binary_assignment = 69;
  /** RegularExpression Id. */
  int t_type_of = 70;
  /** RegularExpression Id. */
  int t_instance_of = 71;
  /** RegularExpression Id. */
  int t_convert = 72;
  /** RegularExpression Id. */
  int t_boolean = 73;
  /** RegularExpression Id. */
  int t_string = 74;
  /** RegularExpression Id. */
  int t_int = 75;
  /** RegularExpression Id. */
  int t_float = 76;
  /** RegularExpression Id. */
  int t_snot = 77;
  /** RegularExpression Id. */
  int t_complex = 78;
  /** RegularExpression Id. */
  int t_list = 79;
  /** RegularExpression Id. */
  int t_tuple = 80;
  /** RegularExpression Id. */
  int t_queue = 81;
  /** RegularExpression Id. */
  int t_stack = 82;
  /** RegularExpression Id. */
  int t_set = 83;
  /** RegularExpression Id. */
  int t_dictionary = 84;
  /** RegularExpression Id. */
  int t_char = 85;
  /** RegularExpression Id. */
  int t_datetime = 86;
  /** RegularExpression Id. */
  int t_timestamp = 87;
  /** RegularExpression Id. */
  int t_file = 88;
  /** RegularExpression Id. */
  int t_random = 89;
  /** RegularExpression Id. */
  int t_in = 90;
  /** RegularExpression Id. */
  int t_not_in = 91;
  /** RegularExpression Id. */
  int t_is = 92;
  /** RegularExpression Id. */
  int t_not_is = 93;
  /** RegularExpression Id. */
  int t_square_bracket_open = 94;
  /** RegularExpression Id. */
  int t_square_bracket_close = 95;
  /** RegularExpression Id. */
  int t_curly_open = 96;
  /** RegularExpression Id. */
  int t_curly_close = 97;
  /** RegularExpression Id. */
  int t_try = 98;
  /** RegularExpression Id. */
  int t_catch = 99;
  /** RegularExpression Id. */
  int t_finally = 100;
  /** RegularExpression Id. */
  int t_throw = 101;
  /** RegularExpression Id. */
  int t_null = 102;
  /** RegularExpression Id. */
  int t_undefined = 103;
  /** RegularExpression Id. */
  int t_method = 104;
  /** RegularExpression Id. */
  int t_lambda = 105;
  /** RegularExpression Id. */
  int t_return = 106;
  /** RegularExpression Id. */
  int t_public = 107;
  /** RegularExpression Id. */
  int t_private = 108;
  /** RegularExpression Id. */
  int t_protected = 109;
  /** RegularExpression Id. */
  int t_internal = 110;
  /** RegularExpression Id. */
  int t_class = 111;
  /** RegularExpression Id. */
  int t_construct = 112;
  /** RegularExpression Id. */
  int t_destruct = 113;
  /** RegularExpression Id. */
  int t_attribute = 114;
  /** RegularExpression Id. */
  int t_my = 115;
  /** RegularExpression Id. */
  int t_import = 116;
  /** RegularExpression Id. */
  int t_strict = 117;
  /** RegularExpression Id. */
  int t_var = 118;
  /** RegularExpression Id. */
  int t_escape_character = 119;
  /** RegularExpression Id. */
  int t_backspace = 120;
  /** RegularExpression Id. */
  int t_form_feed = 121;
  /** RegularExpression Id. */
  int t_new_line = 122;
  /** RegularExpression Id. */
  int t_carriage_return = 123;
  /** RegularExpression Id. */
  int t_horizontal_tab = 124;
  /** RegularExpression Id. */
  int t_vertical_tab = 125;
  /** RegularExpression Id. */
  int t_single_quote = 126;
  /** RegularExpression Id. */
  int t_doble_quote = 127;
  /** RegularExpression Id. */
  int t_backslash = 128;
  /** RegularExpression Id. */
  int t_split = 129;
  /** RegularExpression Id. */
  int t_replace = 130;
  /** RegularExpression Id. */
  int t_flip = 131;
  /** RegularExpression Id. */
  int t_lower = 132;
  /** RegularExpression Id. */
  int t_upper = 133;
  /** RegularExpression Id. */
  int t_trim = 134;
  /** RegularExpression Id. */
  int t_lenght = 135;
  /** RegularExpression Id. */
  int t_capitalize = 136;
  /** RegularExpression Id. */
  int t_index = 137;
  /** RegularExpression Id. */
  int t_concatenate = 138;
  /** RegularExpression Id. */
  int t_dot = 139;
  /** RegularExpression Id. */
  int t_dot_assignment = 140;
  /** RegularExpression Id. */
  int t_abs = 141;
  /** RegularExpression Id. */
  int t_ceil = 142;
  /** RegularExpression Id. */
  int t_cmp = 143;
  /** RegularExpression Id. */
  int t_exp = 144;
  /** RegularExpression Id. */
  int t_fabs = 145;
  /** RegularExpression Id. */
  int t_floor = 146;
  /** RegularExpression Id. */
  int t_log = 147;
  /** RegularExpression Id. */
  int t_log10 = 148;
  /** RegularExpression Id. */
  int t_max = 149;
  /** RegularExpression Id. */
  int t_min = 150;
  /** RegularExpression Id. */
  int t_modf = 151;
  /** RegularExpression Id. */
  int t_pow_prefix = 152;
  /** RegularExpression Id. */
  int t_round = 153;
  /** RegularExpression Id. */
  int t_sqrt = 154;
  /** RegularExpression Id. */
  int t_random_range = 155;
  /** RegularExpression Id. */
  int t_choice = 156;
  /** RegularExpression Id. */
  int t_random_generate = 157;
  /** RegularExpression Id. */
  int t_acos = 158;
  /** RegularExpression Id. */
  int t_asin = 159;
  /** RegularExpression Id. */
  int t_atan = 160;
  /** RegularExpression Id. */
  int t_cos = 161;
  /** RegularExpression Id. */
  int t_sin = 162;
  /** RegularExpression Id. */
  int t_tan = 163;
  /** RegularExpression Id. */
  int t_degrees = 164;
  /** RegularExpression Id. */
  int t_radians = 165;
  /** RegularExpression Id. */
  int t_insert = 166;
  /** RegularExpression Id. */
  int t_insert_at = 167;
  /** RegularExpression Id. */
  int t_remove = 168;
  /** RegularExpression Id. */
  int t_remove_at = 169;
  /** RegularExpression Id. */
  int t_extend = 170;
  /** RegularExpression Id. */
  int t_clear = 171;
  /** RegularExpression Id. */
  int t_copy = 172;
  /** RegularExpression Id. */
  int t_count = 173;
  /** RegularExpression Id. */
  int t_reverse = 174;
  /** RegularExpression Id. */
  int t_sort = 175;
  /** RegularExpression Id. */
  int t_shuffle = 176;
  /** RegularExpression Id. */
  int t_peek = 177;
  /** RegularExpression Id. */
  int t_pop = 178;
  /** RegularExpression Id. */
  int t_push = 179;
  /** RegularExpression Id. */
  int t_enqueue = 180;
  /** RegularExpression Id. */
  int t_dequeue = 181;
  /** RegularExpression Id. */
  int t_add = 182;
  /** RegularExpression Id. */
  int t_discard = 183;
  /** RegularExpression Id. */
  int t_get = 184;
  /** RegularExpression Id. */
  int t_difference = 185;
  /** RegularExpression Id. */
  int t_difference_symmetric = 186;
  /** RegularExpression Id. */
  int t_intersection = 187;
  /** RegularExpression Id. */
  int t_union = 188;
  /** RegularExpression Id. */
  int t_cartesian_product = 189;
  /** RegularExpression Id. */
  int t_complement = 190;
  /** RegularExpression Id. */
  int t_var_name = 191;
  /** RegularExpression Id. */
  int t_char_value = 192;
  /** RegularExpression Id. */
  int t_string_value = 193;
  /** RegularExpression Id. */
  int t_int_value = 194;
  /** RegularExpression Id. */
  int t_float_value = 195;
  /** RegularExpression Id. */
  int t_snot_value = 196;
  /** RegularExpression Id. */
  int t_complex_value = 197;
  /** RegularExpression Id. */
  int t_comment = 198;
  /** RegularExpression Id. */
  int t_comment_multiline = 199;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"if\"",
    "\"elif\"",
    "\"unless\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"else\"",
    "\"true\"",
    "\"false\"",
    "\"=\"",
    "<t_equal>",
    "<t_equal_exactly>",
    "<t_less_than>",
    "<t_less_equal>",
    "<t_greater_than>",
    "<t_greater_equal>",
    "<t_not_equal>",
    "<t_not_equal_exactly>",
    "<t_and_logic>",
    "<t_or_logic>",
    "<t_not_logic>",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"break\"",
    "\"next\"",
    "\"not_yet\"",
    "\"again\"",
    "\"for\"",
    "\"while\"",
    "\"until\"",
    "\"iterator\"",
    "\"foreach\"",
    "\"do\"",
    "<t_range>",
    "\",\"",
    "\"output\"",
    "<t_text>",
    "\"input\"",
    "\"+\"",
    "\"-\"",
    "\"/\"",
    "\"//\"",
    "\"*\"",
    "\"**\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"//=\"",
    "\"**=\"",
    "\"%=\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"<<\"",
    "\">>\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"~=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"type_of\"",
    "\"instance_of\"",
    "\"convert\"",
    "\"boolean\"",
    "\"string\"",
    "\"int\"",
    "\"float\"",
    "\"snot\"",
    "\"complex\"",
    "\"list\"",
    "\"tuple\"",
    "\"queue\"",
    "\"stack\"",
    "\"set\"",
    "\"dictionary\"",
    "\"char\"",
    "\"datetime\"",
    "\"timestamp\"",
    "\"file\"",
    "\"random\"",
    "\"in\"",
    "\"not_in\"",
    "\"is\"",
    "\"not_is\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"try\"",
    "\"catch\"",
    "\"finally\"",
    "\"throw\"",
    "\"null\"",
    "\"undefined\"",
    "\"method\"",
    "<t_lambda>",
    "\"return\"",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"internal\"",
    "\"class\"",
    "\"construct\"",
    "\"destruct\"",
    "\"attribute\"",
    "\"my\"",
    "\"import\"",
    "\"strict\"",
    "\"var\"",
    "\"\\\\\"",
    "\"\\\\b\"",
    "\"\\\\f\"",
    "\"\\\\n\"",
    "\"\\\\r\"",
    "\"\\\\t\"",
    "\"\\\\v\"",
    "\"\\\\\\\'\"",
    "\"\\\\\\\"\"",
    "\"\\\\\\\\\"",
    "\"split\"",
    "\"replace\"",
    "\"flip\"",
    "\"lower\"",
    "\"upper\"",
    "\"trim\"",
    "\"lenght\"",
    "\"capitalize\"",
    "\"index\"",
    "\"concatenate\"",
    "\".\"",
    "\".=\"",
    "\"abs\"",
    "\"ceil\"",
    "\"cmp\"",
    "\"exp\"",
    "\"fabs\"",
    "\"floor\"",
    "\"log\"",
    "\"log10\"",
    "\"max\"",
    "\"min\"",
    "\"modf\"",
    "\"pow\"",
    "\"round\"",
    "\"sqrt\"",
    "\"random_range\"",
    "\"choice\"",
    "\"random_generate\"",
    "\"acos\"",
    "\"asin\"",
    "\"atan\"",
    "\"cos\"",
    "\"sin\"",
    "\"tan\"",
    "\"degrees\"",
    "\"radians\"",
    "\"insert\"",
    "\"insert_at\"",
    "\"remove\"",
    "\"remove_at\"",
    "\"extend\"",
    "\"clear\"",
    "\"copy\"",
    "\"count\"",
    "\"reverse\"",
    "\"sort\"",
    "\"shuffle\"",
    "\"peek\"",
    "\"pop\"",
    "\"push\"",
    "\"enqueue\"",
    "\"dequeue\"",
    "\"add\"",
    "\"discard\"",
    "\"get\"",
    "\"difference\"",
    "\"difference_symmetric\"",
    "\"intersection\"",
    "\"union\"",
    "\"cartesian_product\"",
    "\"complement\"",
    "<t_var_name>",
    "<t_char_value>",
    "<t_string_value>",
    "<t_int_value>",
    "<t_float_value>",
    "<t_snot_value>",
    "<t_complex_value>",
    "<t_comment>",
    "<t_comment_multiline>",
  };

}
