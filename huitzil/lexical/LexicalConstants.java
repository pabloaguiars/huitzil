/* Generated By:JavaCC: Do not edit this line. LexicalConstants.java */
//package for all files in the lexical/ directory
package lexical;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LexicalConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int t_conditional = 5;
  /** RegularExpression Id. */
  int t_elif = 6;
  /** RegularExpression Id. */
  int t_parenthesis_group_open = 7;
  /** RegularExpression Id. */
  int t_parenthesis_group_close = 8;
  /** RegularExpression Id. */
  int t_colons = 9;
  /** RegularExpression Id. */
  int t_else = 10;
  /** RegularExpression Id. */
  int t_bool = 11;
  /** RegularExpression Id. */
  int t_asiggnment = 12;
  /** RegularExpression Id. */
  int t_comparison_operator = 13;
  /** RegularExpression Id. */
  int t_logic_operator = 14;
  /** RegularExpression Id. */
  int t_switch = 15;
  /** RegularExpression Id. */
  int t_case = 16;
  /** RegularExpression Id. */
  int t_default = 17;
  /** RegularExpression Id. */
  int t_break = 18;
  /** RegularExpression Id. */
  int t_next = 19;
  /** RegularExpression Id. */
  int t_not_yet = 20;
  /** RegularExpression Id. */
  int t_again = 21;
  /** RegularExpression Id. */
  int t_loop = 22;
  /** RegularExpression Id. */
  int t_do = 23;
  /** RegularExpression Id. */
  int t_range = 24;
  /** RegularExpression Id. */
  int t_comma = 25;
  /** RegularExpression Id. */
  int t_output = 26;
  /** RegularExpression Id. */
  int t_text = 27;
  /** RegularExpression Id. */
  int t_input = 28;
  /** RegularExpression Id. */
  int t_aritmethic_operator = 29;
  /** RegularExpression Id. */
  int t_aritmethic_operator_assignment = 30;
  /** RegularExpression Id. */
  int t_bitwise_operator = 31;
  /** RegularExpression Id. */
  int t_bitwise_operator_assignment = 32;
  /** RegularExpression Id. */
  int t_type_operator = 33;
  /** RegularExpression Id. */
  int t_data_type = 34;
  /** RegularExpression Id. */
  int t_membership_operator = 35;
  /** RegularExpression Id. */
  int t_identity_operator = 36;
  /** RegularExpression Id. */
  int t_array_open = 37;
  /** RegularExpression Id. */
  int t_array_close = 38;
  /** RegularExpression Id. */
  int t_set_open = 39;
  /** RegularExpression Id. */
  int t_set_close = 40;
  /** RegularExpression Id. */
  int t_try = 41;
  /** RegularExpression Id. */
  int t_catch = 42;
  /** RegularExpression Id. */
  int t_finally = 43;
  /** RegularExpression Id. */
  int t_throw = 44;
  /** RegularExpression Id. */
  int t_null = 45;
  /** RegularExpression Id. */
  int t_undefined = 46;
  /** RegularExpression Id. */
  int t_method = 47;
  /** RegularExpression Id. */
  int t_lambda = 48;
  /** RegularExpression Id. */
  int t_return = 49;
  /** RegularExpression Id. */
  int t_data_security = 50;
  /** RegularExpression Id. */
  int t_class = 51;
  /** RegularExpression Id. */
  int t_class_construct = 52;
  /** RegularExpression Id. */
  int t_class_destruct = 53;
  /** RegularExpression Id. */
  int t_attribute = 54;
  /** RegularExpression Id. */
  int t_my = 55;
  /** RegularExpression Id. */
  int t_import = 56;
  /** RegularExpression Id. */
  int t_strict = 57;
  /** RegularExpression Id. */
  int t_var = 58;
  /** RegularExpression Id. */
  int t_escape_character = 59;
  /** RegularExpression Id. */
  int t_string_method = 60;
  /** RegularExpression Id. */
  int t_dot = 61;
  /** RegularExpression Id. */
  int t_dot_assignment = 62;
  /** RegularExpression Id. */
  int t_number_method = 63;
  /** RegularExpression Id. */
  int t_trigonometric_method = 64;
  /** RegularExpression Id. */
  int t_array_method = 65;
  /** RegularExpression Id. */
  int t_set_method = 66;
  /** RegularExpression Id. */
  int t_var_name = 67;
  /** RegularExpression Id. */
  int t_char_value = 68;
  /** RegularExpression Id. */
  int t_string_value = 69;
  /** RegularExpression Id. */
  int t_int_value = 70;
  /** RegularExpression Id. */
  int t_float_value = 71;
  /** RegularExpression Id. */
  int t_snot_value = 72;
  /** RegularExpression Id. */
  int t_complex_value = 73;
  /** RegularExpression Id. */
  int t_comment = 74;
  /** RegularExpression Id. */
  int t_comment_multiline = 75;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<t_conditional>",
    "\"elif\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\"else\"",
    "<t_bool>",
    "\"=\"",
    "<t_comparison_operator>",
    "<t_logic_operator>",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"break\"",
    "\"next\"",
    "\"not_yet\"",
    "\"again\"",
    "<t_loop>",
    "\"do\"",
    "<t_range>",
    "\",\"",
    "\"output\"",
    "<t_text>",
    "\"input\"",
    "<t_aritmethic_operator>",
    "<t_aritmethic_operator_assignment>",
    "<t_bitwise_operator>",
    "<t_bitwise_operator_assignment>",
    "<t_type_operator>",
    "<t_data_type>",
    "<t_membership_operator>",
    "<t_identity_operator>",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"try\"",
    "\"catch\"",
    "\"finally\"",
    "\"throw\"",
    "\"null\"",
    "\"undefined\"",
    "\"method\"",
    "<t_lambda>",
    "\"return\"",
    "<t_data_security>",
    "\"class\"",
    "\"construct\"",
    "\"destruct\"",
    "\"attribute\"",
    "\"my\"",
    "\"import\"",
    "\"strict\"",
    "\"var\"",
    "<t_escape_character>",
    "<t_string_method>",
    "\".\"",
    "\".=\"",
    "<t_number_method>",
    "<t_trigonometric_method>",
    "<t_array_method>",
    "<t_set_method>",
    "<t_var_name>",
    "<t_char_value>",
    "<t_string_value>",
    "<t_int_value>",
    "<t_float_value>",
    "<t_snot_value>",
    "<t_complex_value>",
    "<t_comment>",
    "<t_comment_multiline>",
  };

}
