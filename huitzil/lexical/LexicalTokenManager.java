/* Generated By:JavaCC: Do not edit this line. LexicalTokenManager.java */
//package for all files in the lexical/ directory
package lexical;

/** Token Manager. */
public class LexicalTokenManager implements LexicalConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xc0000000L) != 0L || (active1 & 0x4028000000L) != 0L)
         {
            jjmatchedKind = 191;
            return 58;
         }
         if ((active0 & 0x18300000000000L) != 0L)
            return 83;
         if ((active0 & 0x81000000020L) != 0L || (active1 & 0x10400014000880L) != 0L || (active2 & 0x80000c000000200L) != 0L)
         {
            jjmatchedKind = 191;
            return 2;
         }
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            return 51;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 19;
            return 8;
         }
         if ((active0 & 0x6e3c003080L) != 0L || (active1 & 0x6bb9bc01ff7740L) != 0L || (active2 & 0x76afb81e15e6c56aL) != 0L)
         {
            jjmatchedKind = 191;
            return 29;
         }
         if ((active0 & 0x800000000000000L) != 0L || (active1 & 0x2L) != 0L)
            return 17;
         if ((active0 & 0x840L) != 0L || (active2 & 0x10040000010000L) != 0L)
         {
            jjmatchedKind = 191;
            return 0;
         }
         if ((active0 & 0x100000000L) != 0L || (active1 & 0x4000000000000L) != 0L || (active2 & 0x400001c0002000L) != 0L)
         {
            jjmatchedKind = 191;
            return 11;
         }
         if ((active1 & 0x8000L) != 0L || (active2 & 0x180090L) != 0L)
         {
            jjmatchedKind = 191;
            return 43;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 17;
            return 5;
         }
         if ((active1 & 0x40002000000L) != 0L || (active2 & 0x43202a000004L) != 0L)
         {
            jjmatchedKind = 191;
            return 23;
         }
         if ((active0 & 0x400000000000000L) != 0L || (active1 & 0x1L) != 0L)
            return 13;
         if ((active0 & 0x4000L) != 0L)
            return 38;
         if ((active2 & 0x1800L) != 0L)
            return 25;
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 191;
            return 15;
         }
         return -1;
      case 1:
         if ((active1 & 0x2000000L) != 0L || (active2 & 0x2028000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 1;
            }
            return 22;
         }
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x28000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 1;
            }
            return 60;
         }
         if ((active2 & 0x80L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 18;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active2 & 0x100000000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x40000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 21;
               jjmatchedPos = 1;
            }
            return 29;
         }
         if ((active0 & 0x84000000020L) != 0L || (active1 & 0x8400014000880L) != 0L || (active2 & 0x80000c000000200L) != 0L)
            return 29;
         if ((active0 & 0x23f3c0038c0L) != 0L || (active1 & 0x77bdfc01fff740L) != 0L || (active2 & 0x76ffff1fd7ffe57eL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 1;
            }
            return 29;
         }
         return -1;
      case 2:
         if ((active0 & 0xa1d7c0038c0L) != 0L || (active1 & 0x37bdf801f7f7c0L) != 0L || (active2 & 0x76bbfff1d68647feL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 2;
            }
            return 29;
         }
         if ((active1 & 0x2000000L) != 0L || (active2 & 0x28000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 2;
            }
            return 21;
         }
         if ((active0 & 0x2200000000L) != 0L || (active1 & 0x40400400080800L) != 0L || (active2 & 0x944000e0179a000L) != 0L)
            return 29;
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x28000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 25;
               jjmatchedPos = 2;
            }
            return 29;
         }
         return -1;
      case 3:
         if ((active0 & 0xa3db4002080L) != 0L || (active1 & 0x37fdb82ad757c0L) != 0L || (active2 & 0x7eb16ff03a1407b6L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 3;
            return 29;
         }
         if ((active0 & 0x48001840L) != 0L || (active1 & 0x400120a000L) != 0L || (active2 & 0xa9001c4824048L) != 0L)
            return 29;
         return -1;
      case 4:
         if ((active0 & 0x80d20002000L) != 0L || (active1 & 0x802800071000L) != 0L || (active2 & 0x1000280002140232L) != 0L)
            return 29;
         if ((active0 & 0x23094000080L) != 0L || (active1 & 0x377d902ad047c0L) != 0L || (active2 & 0x6eb147f038000584L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 4;
            return 29;
         }
         return -1;
      case 5:
         if ((active0 & 0x3090000000L) != 0L || (active1 & 0x7709000d043c0L) != 0L || (active2 & 0x6eb1403000000504L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 5;
            }
            return 29;
         }
         if ((active0 & 0x20004000080L) != 0L || (active1 & 0x300d002a000400L) != 0L || (active2 & 0x7c038000080L) != 0L)
            return 29;
         return -1;
      case 6:
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x7608000d00080L) != 0L || (active2 & 0x6e00028028000500L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 6;
            return 29;
         }
         if ((active0 & 0x2090000000L) != 0L || (active1 & 0x101000004340L) != 0L || (active2 & 0xb1403000000004L) != 0L)
            return 29;
         return -1;
      case 7:
         if ((active1 & 0x5208000900080L) != 0L || (active2 & 0x6e00028028000500L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 7;
            return 29;
         }
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x2400000400000L) != 0L)
            return 29;
         return -1;
      case 8:
         if ((active1 & 0x100080L) != 0L || (active2 & 0x6e00000028000500L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 8;
            return 29;
         }
         if ((active1 & 0x5208000800000L) != 0L || (active2 & 0x28000000000L) != 0L)
            return 29;
         return -1;
      case 9:
         if ((active1 & 0x80L) != 0L || (active2 & 0x2800000028000400L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 191;
               jjmatchedPos = 9;
            }
            return 29;
         }
         if ((active1 & 0x100000L) != 0L || (active2 & 0x4600000000000100L) != 0L)
            return 29;
         return -1;
      case 10:
         if ((active2 & 0x2c00000028000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 10;
            return 29;
         }
         if ((active1 & 0x80L) != 0L || (active2 & 0x400L) != 0L)
            return 29;
         return -1;
      case 11:
         if ((active2 & 0x800000008000000L) != 0L)
            return 29;
         if ((active2 & 0x2400000020000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 11;
            return 29;
         }
         return -1;
      case 12:
         if ((active2 & 0x2400000020000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 12;
            return 29;
         }
         return -1;
      case 13:
         if ((active2 & 0x2400000020000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 13;
            return 29;
         }
         return -1;
      case 14:
         if ((active2 & 0x20000000L) != 0L)
            return 29;
         if ((active2 & 0x2400000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 14;
            return 29;
         }
         return -1;
      case 15:
         if ((active2 & 0x2400000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 15;
            return 29;
         }
         return -1;
      case 16:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 16;
            return 29;
         }
         if ((active2 & 0x2000000000000000L) != 0L)
            return 29;
         return -1;
      case 17:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 17;
            return 29;
         }
         return -1;
      case 18:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 18;
            return 29;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 40:
         return jjStopAtPos(0, 8);
      case 41:
         return jjStopAtPos(0, 9);
      case 42:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x122000000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 40);
      case 45:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 139;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000L);
      case 47:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0xc0800000000000L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 10);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x10L, 0x0L);
      case 61:
         return jjStartNfaWithStates_0(0, 14, 38);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x20L, 0x0L);
      case 91:
         return jjStopAtPos(0, 94);
      case 92:
         jjmatchedKind = 119;
         return jjMoveStringLiteralDfa1_0(0x0L, 0xff00000000000000L, 0x1L);
      case 93:
         return jjStopAtPos(0, 95);
      case 94:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x4000000000000L, 0x400001c0002000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x200L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x1800800204100L, 0x600038021000c500L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4010000000L, 0x2000000500000L, 0x6a0001000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x840L, 0x0L, 0x10040000010000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2200002000L, 0x1001001000L, 0x60008L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x100000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x81000000020L, 0x10400014000880L, 0x80000c000000200L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L, 0x180090L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8010000000000L, 0xe00000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0xc0000000L, 0x4028000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380000000000L, 0xe000001000000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40002000000L, 0x43202a000004L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x200000000c2400L, 0x1800404000002L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x2400810040L, 0x800000040L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x800000080L, 0x8000000000L, 0x1000000000000020L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L, 0x0L);
      case 123:
         return jjStopAtPos(0, 96);
      case 124:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L);
      case 125:
         return jjStopAtPos(0, 97);
      case 126:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x0L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         break;
      case 39:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 126);
         break;
      case 42:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 47:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 60:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 61:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active2 & 0x1000L) != 0L)
            return jjStopAtPos(1, 140);
         break;
      case 62:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 92:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8002000L, active1, 0x40000802400000L, active2, 0x2000002828220100L);
      case 98:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 120);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000000L, active1, 0x2050000080000L, active2, 0x122431000004084L);
      case 102:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 29);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 121);
         break;
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x2000200000L, active2, 0x1000010000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1001908000L, active2, 0x680000400400000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x840L, active1, 0x800000001000L, active2, 0x80000040008L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000000L, active2, 0x8000L);
      case 110:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 122);
         return jjMoveStringLiteralDfa2_0(active0, 0x80800000080L, active1, 0x408000002880L, active2, 0x181000c000000200L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 29);
         return jjMoveStringLiteralDfa2_0(active0, 0x2280000000L, active1, 0x1000028004300L, active2, 0x4004b00203980410L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x22L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x4000000L);
      case 114:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 123);
         return jjMoveStringLiteralDfa2_0(active0, 0x20001000L, active1, 0x300400000000L, active2, 0x40L);
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 92, 29);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 116:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 124);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0x24000000040400L, active2, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L, active1, 0x84000030000L, active2, 0x8000000000000L);
      case 118:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 125);
         break;
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000010000L);
      case 121:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 115, 29);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(2, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(2, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(2, 69);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x800000240000L, active2, 0x100000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000L, active2, 0x20000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 100:
         if ((active2 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 182, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000000L, active2, 0x2000800200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000000L, active1, 0x20000L, active2, 0x2080000000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L, active2, 0x600000000000000L);
      case 103:
         if ((active2 & 0x80000L) != 0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1000100000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000040L, active1, 0x100000000000L, active2, 0x1000000080004048L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2080L, active1, 0x4001000000L, active2, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x804000L, active2, 0x4000030000000000L);
      case 110:
         if ((active2 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 150, 29);
         else if ((active2 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 162, 29);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 163, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1001002000100L, active2, 0x28000480L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000003200L, active2, 0x50040000L);
      case 112:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 143, 29);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 144, 29);
         else if ((active2 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 178, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x10000000010040L, active2, 0x100000000124L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x30000000000000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 118, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x20002000000400L, active2, 0x2000800004000000L);
      case 115:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 141, 29);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 161, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000800L, active1, 0x2000000008080L, active2, 0x8800c000000000L);
      case 116:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 29);
         else if ((active2 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 184, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x20880000000L, active1, 0x4450828400000L, active2, 0x800040000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0L, active2, 0x1200002000000L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000000000L);
      case 119:
         if ((active2 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 152, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 120:
         if ((active2 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 149, 29);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 98, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x100000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x28000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000L, active1, 0x1000001000L, active2, 0x80000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800040000L, active2, 0x80000000000400L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000L, active2, 0x28000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 29);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 29);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 29);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000080L, active1, 0x408000c00040L, active2, 0x80044c000000230L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 29);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 151, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x601000000000000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 104:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 179, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x900000000L, active1, 0x20000000000400L, active2, 0x2010000102L);
      case 107:
         if ((active2 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 177, 29);
         break;
      case 108:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 102, 29);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 142, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L, active1, 0x80000010200L, active2, 0x4L);
      case 109:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 134, 29);
         break;
      case 110:
         if ((active2 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 159, 29);
         else if ((active2 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 160, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200002000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10002000000000L, active2, 0x1000030000040000L);
      case 112:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0x4000L, active2, 0x4000000000000000L);
      case 114:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x4000000000000L, active2, 0x1000000000L);
      case 115:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 145, 29);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 158, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0x1800000000000L, active2, 0L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 29);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 29);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 29);
         else if ((active2 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 154, 29);
         else if ((active2 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 175, 29);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L, active1, 0x2200000100080L, active2, 0x2000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x40000020000L, active2, 0x30000000000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000100L, active2, 0L);
      case 121:
         if ((active2 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 172, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 48:
         if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 29);
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000L, active1, 0x100000000080L, active2, 0x80002000000404L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x20000000000000L, active2, 0x10000000L);
      case 100:
         if ((active2 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 153, 29);
         break;
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 29);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 29);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 29);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000300L, active2, 0x2630001000000000L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000000L, active2, 0x1000000000000L);
      case 104:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 99, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4080028100000L, active2, 0L);
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 29);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 29);
         break;
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000004000L, active2, 0x4000000000000000L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 29);
         else if ((active2 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 188, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400L, active2, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10002000000L, active2, 0x28000000L);
      case 114:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 132, 29);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(4, 133, 29);
         else if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 146, 29);
         else if ((active2 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 171, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x12440000000000L, active2, 0x80040c000000000L);
      case 115:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L, active1, 0x800000L, active2, 0L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 29);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 29);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 29);
         else if ((active2 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 173, 29);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000400000L, active2, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20010000000L, active1, 0L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x30000000000L);
      case 119:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 29);
         break;
      case 120:
         if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 137, 29);
         break;
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200L, active2, 0x100L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 99:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 107, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x200000000000L, active2, 0x4L);
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 29);
         else if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 170, 29);
         break;
      case 101:
         if ((active2 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 156, 29);
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L, active1, 0x4000L, active2, 0x4000021000000000L);
      case 103:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 29);
         break;
      case 104:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000400000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L, active1, 0x1000000000L, active2, 0x1000000000000L);
      case 109:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x28000000L);
      case 110:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 29);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000080L, active2, 0x2000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100040L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000100L, active2, 0x680000000000000L);
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 29);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 29);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x2800400000000000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 29);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 29);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 117, 29);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 135, 29);
         else if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x100000800000L, active2, 0x8000000400L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000000000L, active2, 0x30000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x28028000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000800000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000080L, active2, 0L);
      case 100:
         if ((active2 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 183, 29);
         break;
      case 101:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 108, 29);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 130, 29);
         else if ((active2 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 174, 29);
         else if ((active2 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 176, 29);
         else if ((active2 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 180, 29);
         else if ((active2 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 181, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0xe00000000000400L);
      case 102:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 29);
         break;
      case 104:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 29);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x2000000000000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L, active2, 0x4000000000000000L);
      case 110:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000100000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 115:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 164, 29);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 165, 29);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 29);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 29);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 72, 29);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x5000000000000L, active2, 0L);
      case 120:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 29);
         break;
      case 121:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0x2000028000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0x800000000000000L);
      case 101:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x208000000080L, active2, 0x4000000000000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100L);
      case 108:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 29);
         break;
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x600000000000400L);
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x8000000L);
      case 116:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 113, 29);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active1, 0x80L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x8000400L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x600000000000000L);
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 103, 29);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 29);
         break;
      case 101:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 114, 29);
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x6000000000000000L);
      case 112:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(8, 87, 29);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x100000L, active2, 0L);
      case 116:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 112, 29);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 167, 29);
         else if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 169, 29);
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x800000000000000L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x2000000000000000L);
      case 101:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 136, 29);
         else if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x400000000000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x800000000000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x28000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0x80L, active2, 0L);
      case 116:
         if ((active2 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 190, 29);
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x400L);
      case 121:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x400000000000000L);
      case 101:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 138, 29);
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x20000000L);
      case 102:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(10, 71, 29);
         break;
      case 103:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x800000000000000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active1, 0L, active2, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2);
}
static private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, 0L, active2);
      return 11;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 155, 29);
         break;
      case 110:
         if ((active2 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 187, 29);
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active2, 0x2000000020000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active2, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa12_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(10, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, 0L, active2);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_0(active2, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active2, 0x2000000000000000L);
      case 121:
         return jjMoveStringLiteralDfa13_0(active2, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa13_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, 0L, active2);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa14_0(active2, 0x2000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa14_0(active2, 0x400000000000000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active2, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa14_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, 0L, active2);
      return 14;
   }
   switch(curChar)
   {
      case 101:
         if ((active2 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(14, 157, 29);
         break;
      case 109:
         return jjMoveStringLiteralDfa15_0(active2, 0x400000000000000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active2, 0x2000000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa15_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, 0L, active2);
      return 15;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa16_0(active2, 0x2000000000000000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active2, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa16_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, 0L, active2);
      return 16;
   }
   switch(curChar)
   {
      case 116:
         if ((active2 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 189, 29);
         return jjMoveStringLiteralDfa17_0(active2, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa17_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, 0L, active2);
      return 17;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa18_0(active2, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa18_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, 0L, active2);
      return 18;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa19_0(active2, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, 0L, active2);
}
static private int jjMoveStringLiteralDfa19_0(long old2, long active2)
{
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, 0L, active2);
      return 19;
   }
   switch(curChar)
   {
      case 99:
         if ((active2 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 186, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, 0L, active2);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 94;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 38:
                  if (curChar == 62)
                  {
                     if (kind > 105)
                        kind = 105;
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 39;
                  if (curChar == 61)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 194)
                        kind = 194;
                     jjCheckNAddStates(0, 8);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 42)
                        kind = 42;
                  }
                  else if (curChar == 33)
                     jjAddStates(13, 14);
                  else if (curChar == 61)
                     jjAddStates(15, 17);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 32;
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 25;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if (curChar == 39)
                     jjCheckNAddStates(18, 20);
                  else if (curChar == 34)
                     jjCheckNAddStates(21, 23);
                  else if (curChar == 35)
                  {
                     if (kind > 198)
                        kind = 198;
                     jjCheckNAdd(31);
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 196)
                        kind = 196;
                     jjCheckNAddStates(27, 29);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 194)
                        kind = 194;
                     jjCheckNAdd(73);
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 4:
                  if (curChar == 60 && kind > 17)
                     kind = 17;
                  break;
               case 5:
                  if (curChar == 61 && kind > 18)
                     kind = 18;
                  break;
               case 6:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 62 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 61 && kind > 20)
                     kind = 20;
                  break;
               case 9:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 13:
                  if (curChar == 38 && kind > 23)
                     kind = 23;
                  break;
               case 14:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 19:
                  if (curChar == 33 && kind > 25)
                     kind = 25;
                  break;
               case 25:
                  if (curChar == 46 && kind > 39)
                     kind = 39;
                  break;
               case 26:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x8400000000L & l) != 0L && kind > 42)
                     kind = 42;
                  break;
               case 30:
                  if (curChar != 35)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAdd(31);
                  break;
               case 31:
                  if ((0xbffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if (curChar == 62)
                     jjCheckNAddTwoStates(33, 35);
                  break;
               case 33:
                  jjCheckNAddTwoStates(33, 35);
                  break;
               case 34:
                  if (curChar == 35 && kind > 199)
                     kind = 199;
                  break;
               case 35:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 37:
                  if (curChar == 61)
                     jjAddStates(15, 17);
                  break;
               case 39:
                  if (curChar == 61 && kind > 16)
                     kind = 16;
                  break;
               case 40:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 62 && kind > 105)
                     kind = 105;
                  break;
               case 53:
                  if (curChar == 33)
                     jjAddStates(13, 14);
                  break;
               case 54:
                  if (curChar == 61 && kind > 21)
                     kind = 21;
                  break;
               case 55:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 56:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 62:
                  if (curChar == 34)
                     jjCheckNAddStates(21, 23);
                  break;
               case 63:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if (curChar == 34 && kind > 192)
                     kind = 192;
                  break;
               case 65:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(65, 66);
                  break;
               case 66:
                  if (curChar == 34 && kind > 193)
                     kind = 193;
                  break;
               case 67:
                  if (curChar == 39)
                     jjCheckNAddStates(18, 20);
                  break;
               case 68:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
                  if (curChar == 39 && kind > 192)
                     kind = 192;
                  break;
               case 70:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if (curChar == 39 && kind > 193)
                     kind = 193;
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  jjCheckNAdd(73);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (curChar == 46)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 195)
                     kind = 195;
                  jjCheckNAdd(76);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  jjCheckNAddStates(27, 29);
                  break;
               case 78:
                  if (curChar == 46)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 196)
                     kind = 196;
                  jjCheckNAdd(82);
                  break;
               case 84:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 91);
                  break;
               case 86:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 88:
                  if (curChar == 46)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(33, 37);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 43);
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 194)
                     kind = 194;
                  jjCheckNAddStates(0, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 105)
                  {
                     if (kind > 22)
                        kind = 22;
                  }
                  else if (curChar == 101)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 116)
                  {
                     if (kind > 25)
                        kind = 25;
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 17;
                  if (curChar == 110)
                     jjAddStates(44, 46);
                  else if (curChar == 103)
                     jjAddStates(47, 48);
                  else if (curChar == 108)
                     jjAddStates(49, 51);
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 101)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 116)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 100)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 114)
                  {
                     if (kind > 24)
                        kind = 24;
                  }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 101)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if (curChar == 116)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 191)
                        kind = 191;
                     jjCheckNAdd(29);
                  }
                  if (curChar == 113)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  break;
               case 3:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 10:
                  if (curChar == 100 && kind > 23)
                     kind = 23;
                  break;
               case 12:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 124 && kind > 24)
                     kind = 24;
                  break;
               case 18:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (curChar == 101 && kind > 39)
                     kind = 39;
                  break;
               case 24:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 191)
                     kind = 191;
                  jjCheckNAdd(29);
                  break;
               case 31:
                  if (kind > 198)
                     kind = 198;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  jjAddStates(52, 53);
                  break;
               case 42:
                  if (curChar == 108)
                     jjAddStates(49, 51);
                  break;
               case 44:
                  if (curChar == 101 && kind > 18)
                     kind = 18;
                  break;
               case 45:
                  if (curChar == 97 && kind > 105)
                     kind = 105;
                  break;
               case 46:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 103)
                     jjAddStates(47, 48);
                  break;
               case 52:
                  if (curChar == 101 && kind > 20)
                     kind = 20;
                  break;
               case 57:
                  if (curChar == 110)
                     jjAddStates(44, 46);
                  break;
               case 59:
                  if (curChar == 105 && kind > 22)
                     kind = 22;
                  break;
               case 61:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  jjAddStates(54, 55);
                  break;
               case 68:
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  jjAddStates(56, 57);
                  break;
               case 80:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 90:
                  if (curChar == 105 && kind > 197)
                     kind = 197;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 198)
                     kind = 198;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 63:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 68:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(56, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 94 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   73, 74, 75, 77, 78, 80, 84, 86, 92, 73, 74, 77, 83, 54, 56, 38, 
   40, 41, 68, 70, 71, 63, 65, 66, 84, 86, 92, 77, 78, 80, 87, 88, 
   90, 86, 87, 88, 90, 91, 84, 86, 87, 88, 90, 92, 58, 59, 61, 51, 
   52, 43, 44, 49, 33, 35, 65, 66, 70, 71, 81, 82, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\151\146", "\145\154\151\146", 
"\165\156\154\145\163\163", "\50", "\51", "\72", "\145\154\163\145", "\164\162\165\145", 
"\146\141\154\163\145", "\75", null, null, null, null, null, null, null, null, null, null, null, 
"\163\167\151\164\143\150", "\143\141\163\145", "\144\145\146\141\165\154\164", "\142\162\145\141\153", 
"\156\145\170\164", "\156\157\164\137\171\145\164", "\141\147\141\151\156", "\146\157\162", 
"\167\150\151\154\145", "\165\156\164\151\154", "\151\164\145\162\141\164\157\162", 
"\146\157\162\145\141\143\150", "\144\157", null, "\54", "\157\165\164\160\165\164", null, 
"\151\156\160\165\164", "\53", "\55", "\57", "\57\57", "\52", "\52\52", "\45", "\53\75", "\55\75", 
"\52\75", "\57\75", "\57\57\75", "\52\52\75", "\45\75", "\46", "\174", "\136", "\176", 
"\74\74", "\76\76", "\46\75", "\174\75", "\136\75", "\176\75", "\74\74\75", "\76\76\75", 
"\164\171\160\145\137\157\146", "\151\156\163\164\141\156\143\145\137\157\146", 
"\143\157\156\166\145\162\164", "\142\157\157\154\145\141\156", "\163\164\162\151\156\147", "\151\156\164", 
"\146\154\157\141\164", "\163\156\157\164", "\143\157\155\160\154\145\170", "\154\151\163\164", 
"\164\165\160\154\145", "\161\165\145\165\145", "\163\164\141\143\153", "\163\145\164", 
"\144\151\143\164\151\157\156\141\162\171", "\143\150\141\162", "\144\141\164\145\164\151\155\145", 
"\164\151\155\145\163\164\141\155\160", "\146\151\154\145", "\162\141\156\144\157\155", "\151\156", 
"\156\157\164\137\151\156", "\151\163", "\156\157\164\137\151\163", "\133", "\135", "\173", "\175", 
"\164\162\171", "\143\141\164\143\150", "\146\151\156\141\154\154\171", 
"\164\150\162\157\167", "\156\165\154\154", "\165\156\144\145\146\151\156\145\144", 
"\155\145\164\150\157\144", null, "\162\145\164\165\162\156", "\160\165\142\154\151\143", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\151\156\164\145\162\156\141\154", 
"\143\154\141\163\163", "\143\157\156\163\164\162\165\143\164", "\144\145\163\164\162\165\143\164", 
"\141\164\164\162\151\142\165\164\145", "\155\171", "\151\155\160\157\162\164", "\163\164\162\151\143\164", 
"\166\141\162", "\134", "\134\142", "\134\146", "\134\156", "\134\162", "\134\164", 
"\134\166", "\134\47", "\134\42", "\134\134", "\163\160\154\151\164", 
"\162\145\160\154\141\143\145", "\146\154\151\160", "\154\157\167\145\162", "\165\160\160\145\162", 
"\164\162\151\155", "\154\145\156\147\150\164", "\143\141\160\151\164\141\154\151\172\145", 
"\151\156\144\145\170", "\143\157\156\143\141\164\145\156\141\164\145", "\56", "\56\75", 
"\141\142\163", "\143\145\151\154", "\143\155\160", "\145\170\160", "\146\141\142\163", 
"\146\154\157\157\162", "\154\157\147", "\154\157\147\61\60", "\155\141\170", "\155\151\156", 
"\155\157\144\146", "\160\157\167", "\162\157\165\156\144", "\163\161\162\164", 
"\162\141\156\144\157\155\137\162\141\156\147\145", "\143\150\157\151\143\145", 
"\162\141\156\144\157\155\137\147\145\156\145\162\141\164\145", "\141\143\157\163", "\141\163\151\156", "\141\164\141\156", "\143\157\163", 
"\163\151\156", "\164\141\156", "\144\145\147\162\145\145\163", 
"\162\141\144\151\141\156\163", "\151\156\163\145\162\164", "\151\156\163\145\162\164\137\141\164", 
"\162\145\155\157\166\145", "\162\145\155\157\166\145\137\141\164", "\145\170\164\145\156\144", 
"\143\154\145\141\162", "\143\157\160\171", "\143\157\165\156\164", "\162\145\166\145\162\163\145", 
"\163\157\162\164", "\163\150\165\146\146\154\145", "\160\145\145\153", "\160\157\160", 
"\160\165\163\150", "\145\156\161\165\145\165\145", "\144\145\161\165\145\165\145", 
"\141\144\144", "\144\151\163\143\141\162\144", "\147\145\164", 
"\144\151\146\146\145\162\145\156\143\145", 
"\144\151\146\146\145\162\145\156\143\145\137\163\171\155\155\145\164\162\151\143", "\151\156\164\145\162\163\145\143\164\151\157\156", "\165\156\151\157\156", 
"\143\141\162\164\145\163\151\141\156\137\160\162\157\144\165\143\164", "\143\157\155\160\154\145\155\145\156\164", null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0x0L, 0xc0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[94];
static private final int[] jjstateSet = new int[188];
static protected char curChar;
/** Constructor. */
public LexicalTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public LexicalTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 94; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
