/* Generated By:JavaCC: Do not edit this line. Parser.java */
//package for all files in the parser/ directory
package parser;
//import Maps and HashMap libreries
import java.util.Map;
import java.util.HashMap;
//public class
public class Parser implements ParserConstants {
        public static Map<String, Integer> table = new HashMap<String, Integer>();
        public static Integer tableIndex = 0;

  static final public void g_program() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_strict:
      g_strict();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_import:
      g_import();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    g_body();

  }

  static final public void g_body() throws ParseException {
    g_instruction();
    g_more_body();

  }

  static final public void g_more_body() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_conditional:
    case t_switch:
    case t_next:
    case t_not_yet:
    case t_again:
    case t_for:
    case t_while:
    case t_until:
    case t_do:
    case t_output:
    case t_try:
    case t_throw:
    case t_method:
    case t_object_security:
    case t_class:
    case t_my:
    case t_new:
    case t_var:
    case t_object_name:
      g_body();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }

  }

  static final public void g_instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_method:
    case t_object_security:
    case t_class:
    case t_new:
    case t_var:
      g_declaration();
      break;
    case t_my:
    case t_object_name:
      g_assignment();
      break;
    case t_conditional:
      g_conditional();
      break;
    case t_while:
      g_while();
      break;
    case t_until:
      g_until();
      break;
    case t_for:
      g_for();
      break;
    case t_do:
      g_do_while();
      break;
    case t_try:
      g_try();
      break;
    case t_output:
      g_output();
      break;
    case t_switch:
      g_switch();
      break;
    case t_throw:
      g_throw_exception();
      break;
    case t_next:
      g_next();
      break;
    case t_again:
      g_again();
      break;
    case t_not_yet:
      g_not_yet();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void g_declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_object_security:
      g_object_security();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_var:
      g_declaration_var();
      break;
    case t_method:
      g_declaration_method();
      break;
    case t_class:
      g_declaration_class();
      break;
    case t_new:
      g_instance_class();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void g_object_security() throws ParseException {
    jj_consume_token(t_object_security);

  }

  static final public void g_declaration_var() throws ParseException {
    jj_consume_token(t_var);
    jj_consume_token(t_object_name);
    jj_consume_token(t_assignment);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_bool:
    case t_input:
    case t_null:
    case t_object_name:
    case t_char_value:
    case t_string_value:
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_declaration_var_single();
      break;
    case t_data_type:
      g_declaration_var_strict();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void g_declaration_var_single() throws ParseException {
    g_value();
    g_declaration_more_vars_single();

  }

  static final public void g_declaration_var_strict() throws ParseException {
    jj_consume_token(t_data_type);
    jj_consume_token(t_parenthesis_group_open);
    g_value();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_instance_class() throws ParseException {
    jj_consume_token(t_new);
    jj_consume_token(t_object_name);
    jj_consume_token(t_assignment);
    jj_consume_token(t_new);
    jj_consume_token(t_object_name);
    jj_consume_token(t_parenthesis_group_open);
    g_pass_parameter();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_pass_parameter() throws ParseException {
    g_value();
    g_pass_more_parameters();

  }

  static final public void g_pass_more_parameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_comma:
      jj_consume_token(t_comma);
      g_value();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }

  }

  static final public void g_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_char_value:
    case t_string_value:
      g_text_value();
      break;
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_number_value();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case t_aritmethic_operator:
      case t_bitwise_operator:
        g_expression();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
    case t_object_name:
      jj_consume_token(t_object_name);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case t_aritmethic_operator:
      case t_bitwise_operator:
        g_expression();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      break;
    case t_bool:
      jj_consume_token(t_bool);
      break;
    case t_null:
      jj_consume_token(t_null);
      break;
    case t_input:
      g_input();

      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void g_text_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_string_value:
      jj_consume_token(t_string_value);
      break;
    case t_char_value:
      jj_consume_token(t_char_value);

      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void g_number_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_int_value:
      jj_consume_token(t_int_value);
      break;
    case t_float_value:
      jj_consume_token(t_float_value);
      break;
    case t_complex_value:
      jj_consume_token(t_complex_value);
      break;
    case t_snot_value:
      jj_consume_token(t_snot_value);

      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void g_declaration_more_vars_single() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_comma:
      jj_consume_token(t_comma);
      jj_consume_token(t_object_name);
      jj_consume_token(t_assignment);
      g_declaration_var_single();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }

  }

  static final public void g_assignment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_my:
      jj_consume_token(t_my);
      jj_consume_token(t_dot);
      jj_consume_token(t_object_name);
      break;
    case t_object_name:
      jj_consume_token(t_object_name);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_assignment:
      jj_consume_token(t_assignment);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case t_bool:
      case t_input:
      case t_null:
      case t_object_name:
      case t_char_value:
      case t_string_value:
      case t_int_value:
      case t_float_value:
      case t_snot_value:
      case t_complex_value:
        g_value();
        break;
      case t_data_type:
        g_declaration_var_strict();
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case t_aritmethic_operator_assignment:
    case t_bitwise_operator_assignment:
      g_operation_assignment();
      break;
    case t_parenthesis_group_open:
      g_method_call();
      break;
    case t_lambda:
      jj_consume_token(t_lambda);
      g_lambda();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void g_var() throws ParseException {
    jj_consume_token(t_object_name);
    g_more_vars();
  }

  static final public void g_more_vars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_comma:
      jj_consume_token(t_comma);
      jj_consume_token(t_object_name);
      g_var();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }

  }

  static final public void g_lambda() throws ParseException {
    g_argument();
    jj_consume_token(t_colons);
    g_expression();

  }

  static final public void g_argument() throws ParseException {
    jj_consume_token(t_object_name);
    g_more_arguments();

  }

  static final public void g_more_arguments() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_comma:
      jj_consume_token(t_comma);
      jj_consume_token(t_object_name);
      g_argument();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }

  }

  static final public void g_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_aritmethic_operator:
      g_aritmethic_operation();
      break;
    case t_bitwise_operator:
      g_bitwise_operation();
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    g_more_expression();

  }

  static final public void g_more_expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_aritmethic_operator:
    case t_bitwise_operator:
      g_expression();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }

  }

  static final public void g_import() throws ParseException {
    jj_consume_token(t_import);
    jj_consume_token(t_string_value);
    g_more_imports();

  }

  static final public void g_more_imports() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_comma:
      jj_consume_token(t_comma);
      jj_consume_token(t_string_value);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }

  }

  static final public void g_strict() throws ParseException {
    jj_consume_token(t_strict);

  }

  static final public void g_conditional() throws ParseException {
    jj_consume_token(t_conditional);
    jj_consume_token(t_parenthesis_group_open);
    g_condition();
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_elif:
      g_elif();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_else:
      g_else();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }

  }

  static final public void g_condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_parenthesis_group_open:
      g_logic_expression();
      break;
    case t_bool:
    case t_input:
    case t_null:
    case t_object_name:
    case t_char_value:
    case t_string_value:
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_comparison();

      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void g_comparison() throws ParseException {
    g_value();
    jj_consume_token(t_comparison_operator);
    g_value();

  }

  static final public void g_logic_expression() throws ParseException {
    jj_consume_token(t_parenthesis_group_open);
    g_comparison();
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_logic_operator);
    jj_consume_token(t_parenthesis_group_open);
    g_comparison();
    jj_consume_token(t_parenthesis_group_close);
    g_more_logic_expressions();

  }

  static final public void g_more_logic_expressions() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_parenthesis_group_open:
      g_logic_expression();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }

  }

  static final public void g_else() throws ParseException {
    jj_consume_token(t_else);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_elif() throws ParseException {
    jj_consume_token(t_elif);
    jj_consume_token(t_parenthesis_group_open);
    g_condition();
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);
    g_more_elifs();

  }

  static final public void g_more_elifs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_elif:
      g_elif();
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }

  }

  static final public void g_while() throws ParseException {
    jj_consume_token(t_while);
    jj_consume_token(t_parenthesis_group_open);
    g_condition();
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_until() throws ParseException {
    jj_consume_token(t_until);
    jj_consume_token(t_parenthesis_group_open);
    g_condition();
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_for() throws ParseException {
    jj_consume_token(t_for);
    jj_consume_token(t_parenthesis_group_open);
    g_range();
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_range() throws ParseException {
    jj_consume_token(t_object_name);
    jj_consume_token(t_membership_operator);
    jj_consume_token(t_range);
    jj_consume_token(t_parenthesis_group_open);
    g_number_value();
    jj_consume_token(t_comma);
    g_number_value();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_next() throws ParseException {
    jj_consume_token(t_next);

  }

  static final public void g_again() throws ParseException {
    jj_consume_token(t_again);

  }

  static final public void g_try() throws ParseException {
    jj_consume_token(t_try);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);
    g_catch();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_finally:
      g_finally();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }

  }

  static final public void g_catch() throws ParseException {
    jj_consume_token(t_catch);
    jj_consume_token(t_parenthesis_group_open);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_exception:
      jj_consume_token(t_exception);
      jj_consume_token(t_object_name);
      break;
    case t_new:
      g_instance_class();
      break;
    case t_parenthesis_group_open:
    case t_bool:
    case t_input:
    case t_null:
    case t_object_name:
    case t_char_value:
    case t_string_value:
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_condition();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);
    g_more_catchs();

  }

  static final public void g_more_catchs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_catch:
      g_catch();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }

  }

  static final public void g_finally() throws ParseException {
    jj_consume_token(t_finally);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_throw_exception() throws ParseException {
    jj_consume_token(t_throw);
    jj_consume_token(t_new);
    jj_consume_token(t_object_name);
    jj_consume_token(t_parenthesis_group_open);
    g_text_value();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_not_yet() throws ParseException {
    jj_consume_token(t_not_yet);

  }

  static final public void g_do_while() throws ParseException {
    jj_consume_token(t_do);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_while);
    jj_consume_token(t_parenthesis_group_open);
    g_condition();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_input() throws ParseException {
    jj_consume_token(t_input);
    jj_consume_token(t_parenthesis_group_open);
    g_text_value();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_output() throws ParseException {
    jj_consume_token(t_output);
    jj_consume_token(t_parenthesis_group_open);
    g_value();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_switch() throws ParseException {
    jj_consume_token(t_switch);
    jj_consume_token(t_parenthesis_group_open);
    jj_consume_token(t_object_name);
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_case();
    g_default();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_case() throws ParseException {
    jj_consume_token(t_case);
    jj_consume_token(t_parenthesis_group_open);
    g_value();
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    g_break();
    jj_consume_token(t_parenthesis_group_close);
    g_more_cases();

  }

  static final public void g_break() throws ParseException {
    jj_consume_token(t_break);

  }

  static final public void g_more_cases() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_case:
      g_case();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }

  }

  static final public void g_default() throws ParseException {
    jj_consume_token(t_default);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_declaration_method() throws ParseException {
    jj_consume_token(t_method);
    jj_consume_token(t_object_name);
    jj_consume_token(t_parenthesis_group_open);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_var:
      g_parameter();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_global:
      g_global();
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    g_instruction();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_return:
      g_return();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_global() throws ParseException {
    jj_consume_token(t_global);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_dot:
      jj_consume_token(t_dot);
      g_assignment();
      break;
    case t_object_name:
      g_var();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void g_parameter() throws ParseException {
    jj_consume_token(t_var);
    jj_consume_token(t_object_name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_assignment:
      jj_consume_token(t_assignment);
      g_value();
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    g_more_parameters();

  }

  static final public void g_more_parameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_comma:
      jj_consume_token(t_comma);
      g_parameter();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }

  }

  static final public void g_return() throws ParseException {
    jj_consume_token(t_return);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_bool:
    case t_input:
    case t_null:
    case t_object_name:
    case t_char_value:
    case t_string_value:
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_value();
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }

  }

  static final public void g_method_call() throws ParseException {
    jj_consume_token(t_parenthesis_group_open);
    g_pass_parameter();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_declaration_class() throws ParseException {
    jj_consume_token(t_class);
    jj_consume_token(t_object_name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_colons:
      jj_consume_token(t_colons);
      jj_consume_token(t_object_name);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(t_parenthesis_group_open);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_not_yet:
      g_not_yet();
      break;
    case t_method:
    case t_object_security:
    case t_class_construct:
    case t_attribute:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case t_object_security:
      case t_attribute:
        g_attributes();
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      g_class_methods();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_attributes() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_object_security:
      g_object_security();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    jj_consume_token(t_attribute);
    jj_consume_token(t_object_name);
    jj_consume_token(t_assignment);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_bool:
    case t_input:
    case t_null:
    case t_object_name:
    case t_char_value:
    case t_string_value:
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_declaration_var_single();
      break;
    case t_data_type:
      g_declaration_var_strict();
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void g_class_methods() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_class_construct:
      g_construct();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    g_declaration_method();
    g_class_more_methods();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_class_destruct:
      g_destruct();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
  }

  static final public void g_class_more_methods() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_method:
      g_declaration_method();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }

  }

  static final public void g_construct() throws ParseException {
    jj_consume_token(t_class_construct);
    jj_consume_token(t_parenthesis_group_open);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_var:
      g_parameter();
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_destruct() throws ParseException {
    jj_consume_token(t_class_destruct);
    jj_consume_token(t_parenthesis_group_open);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_var:
      g_parameter();
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    jj_consume_token(t_parenthesis_group_close);
    jj_consume_token(t_parenthesis_group_open);
    g_instruction();
    jj_consume_token(t_parenthesis_group_close);

  }

  static final public void g_operation_assignment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_aritmethic_operator_assignment:
      g_aritmethic_operation_assignment();
      break;
    case t_bitwise_operator_assignment:
      g_bitwise_operation_assignment();
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void g_aritmethic_operation() throws ParseException {
    jj_consume_token(t_aritmethic_operator);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_number_value();
      break;
    case t_object_name:
      jj_consume_token(t_object_name);
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void g_aritmethic_operation_assignment() throws ParseException {
    jj_consume_token(t_aritmethic_operator_assignment);
    g_number_value();
    g_aritmethic_more_numbers();

  }

  static final public void g_aritmethic_more_numbers() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_aritmethic_operator:
      jj_consume_token(t_aritmethic_operator);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case t_int_value:
      case t_float_value:
      case t_snot_value:
      case t_complex_value:
        g_number_value();
        break;
      case t_object_name:
        jj_consume_token(t_object_name);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      g_aritmethic_operation();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }

  }

  static final public void g_bitwise_operation() throws ParseException {
    jj_consume_token(t_bitwise_operator);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_number_value();
      break;
    case t_object_name:
      jj_consume_token(t_object_name);
      break;
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static final public void g_bitwise_operation_assignment() throws ParseException {
    jj_consume_token(t_bitwise_operator_assignment);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_int_value:
    case t_float_value:
    case t_snot_value:
    case t_complex_value:
      g_number_value();
      break;
    case t_object_name:
      jj_consume_token(t_object_name);
      break;
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    g_bitwise_more_numbers();

  }

  static final public void g_bitwise_more_numbers() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case t_bitwise_operator:
      jj_consume_token(t_bitwise_operator);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case t_int_value:
      case t_float_value:
      case t_snot_value:
      case t_complex_value:
        g_number_value();
        break;
      case t_object_name:
        jj_consume_token(t_object_name);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      g_bitwise_operation();
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }

  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[56];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x9fc40080,0x9fc40080,0x0,0x0,0x2000,0x40000000,0x0,0x0,0x2000,0x0,0x0,0x40000000,0x0,0x2000,0x4200,0x40000000,0x40000000,0x0,0x0,0x40000000,0x100,0x1000,0x2200,0x200,0x100,0x0,0x2200,0x0,0x80000,0x0,0x0,0x0,0x0,0x4000,0x40000000,0x2000,0x800,0x0,0x800000,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x8c448000,0x8c448000,0x4000000,0x8400000,0x100102,0x0,0x14,0x14,0x100002,0x0,0x0,0x0,0x80000000,0x100102,0x1000028,0x0,0x0,0x14,0x14,0x0,0x0,0x0,0x100002,0x0,0x0,0x20000,0x180002,0x10000,0x0,0x0,0x800000,0x2000000,0x0,0x0,0x0,0x100002,0x0,0x44000000,0x54400000,0x4000000,0x100102,0x10000000,0x20000000,0x400000,0x0,0x0,0x28,0x0,0x0,0x4,0x0,0x0,0x0,0x10,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4,0x2,0x1009,0x1009,0x0,0x9,0x7f000,0x0,0x0,0x0,0x7f000,0x6000,0x78000,0x0,0x1000,0x7f000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7f000,0x0,0x0,0x0,0x7f001,0x0,0x0,0x8,0x0,0x0,0x1040,0x0,0x0,0x7f000,0x0,0x0,0x0,0x0,0x7f000,0x0,0x0,0x0,0x8,0x8,0x0,0x79000,0x79000,0x0,0x79000,0x79000,0x79000,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 56; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[83];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 56; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 83; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
